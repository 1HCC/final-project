	module project1(
	  input sysclk,      // 系統時鐘
	  input check,       // 按鍵或信號輸入，用於檢查輸入值
	  input reset,
	  input p7, p6, p5, p4, p3, p2, p1, p0, // 用於輸入的八個按鍵或信號
	  output reg enable, beep,  // 用於啟用某功能的信號、蜂鳴器輸出
	  output reg [3:0] set,  // 當前LED陣列顯示的設定編號
	  output reg [0:7] DATA_R, DATA_G, DATA_B, // RGB 燈輸出
	  output reg [0:6] seg, // 7段顯示器的數據輸出
	  output reg [2:0] COM // 7段顯示器的選擇
	);
	  reg clear; // 用於表示清除信號的變數
	  reg fail;  // 用於表示失敗狀態的變數
	  reg [3:0] C_count, B_count, A_count; // 計時器的個位、十位和百位數
	  reg [2:0] cc; // 用於輪流控制3個7段顯示器
	  reg [0:7] ans1, ans2, ans3; // 正確答案
	  reg [0:6] seg1, seg2, seg3; // 7段顯示器的數據暫存器

	  // 定義並初始化陣列
	  reg [0:7] c[0:7]; // 正確模式的RGB陣列
	  reg [0:7] f[0:7]; // 錯誤模式的RGB陣列

	  initial begin
 // 初始化陣列 c 和 f
		 c[0] = 8'b00111111;
		 c[1] = 8'b00111111;
		 c[2] = 8'b00111111;
		 c[3] = 8'b00000000;
		 c[4] = 8'b00000000;
		 c[5] = 8'b00111111;
		 c[6] = 8'b00111111;
		 c[7] = 8'b00111111;

		 f[0] = 8'b11111111;
		 f[1] = 8'b00000000;
		 f[2] = 8'b00000000;
		 f[3] = 8'b01101111;
		 f[4] = 8'b01101111;
		 f[5] = 8'b11111111;
		 f[6] = 8'b11111111;
		 f[7] = 8'b11111111;

		 // 初始化其他變數
		 clear = 0;
		 fail = 0;
		 enable = 1;
		 ans1 = 8'b00000001;
		 ans2 = 8'b00010000;
		 ans3 = 8'b01011111;
		 set = 4'b0000;
		 DATA_B = 8'b11111111;
		 DATA_G = 8'b11111111;
		 DATA_R = 8'b11111111;
		 COM = 3'b000;
		 cc = 0;
		 A_count = 9;
		 B_count = 2;
		 C_count = 1; // 初始化为倒计时60秒
	  end

	  divfreq div1(sysclk, clk_div); // 生成慢時鐘信號
	  divfreq2 div2(sysclk, clk_div2); // 控制LED刷新速度
	  BCD2Seg S0(A_count, A0, B0, C0, D0, E0, F0, G0);
	  BCD2Seg S1(B_count, A1, B1, C1, D1, E1, F1, G1);
	  BCD2Seg S2(C_count, A2, B2, C2, D2, E2, F2, G2);

always @(posedge check) begin
    if (p7 == ans1[7] && p6 == ans1[6] && p5 == ans1[5] && p4 == ans1[4] && p3 == ans1[3] && p2 == ans1[2] && p1 == ans1[1] && p0 == ans1[0]) begin
        clear = 1;
    end else if (p7 == ans2[7] && p6 == ans2[6] && p5 == ans2[5] && p4 == ans2[4] && p3 == ans2[3] && p2 == ans2[2] && p1 == ans2[1] && p0 == ans2[0]) begin
        clear = 1;
    end else if (p7 == ans3[7] && p6 == ans3[6] && p5 == ans3[5] && p4 == ans3[4] && p3 == ans3[3] && p2 == ans3[2] && p1 == ans3[1] && p0 == ans3[0]) begin
        clear = 1;
    end else begin
        clear = 0;
    end
    beep = clear;
end


	  // 倒计时逻辑
	  always @(posedge clk_div or posedge reset) begin
		 if (reset) begin
			A_count <= 9;
			B_count <= 2;
			C_count <= 0; // 倒计时复位为60秒
			fail <= 0;
		 end else if (!fail && !clear) begin
			if (A_count == 0) begin
			  A_count <= 9;
			  if (B_count == 0) begin
				 B_count <= 2;
				 if (C_count != 0)
					C_count <= C_count - 1;
				 else
					fail <= 1; // 倒计时结束，标记失败
			  end else
				 B_count <= B_count - 1;
			end else
			  A_count <= A_count - 1;
		 end
	  end

	  // LED顯示控制
	  always @(posedge clk_div2 or posedge reset) begin
		 if (reset) begin
			set <= 4'b0000;
			DATA_R <= 8'b11111111;
			DATA_G <= 8'b11111111;
			DATA_B <= 8'b11111111;
		 end else begin
			if (clear) begin
			  set <= (set == 4'b1111) ? 4'b0000 : set + 1;
			  DATA_G <= c[set]; // 顯示綠燈模式
			end else if (fail) begin
			  set <= (set == 4'b1111) ? 4'b0000 : set + 1;
			  DATA_R <= f[set]; // 顯示紅燈模式
			end else begin // 預設白燈
			  DATA_R <= 8'b11111111;
			  DATA_G <= 8'b11111111;
			  DATA_B <= 8'b11111111;
			end
		 end
	  end

	  // 控制 7 段顯示器輪流顯示
	  always @(posedge clk_div2) begin
		 seg1 = {A0, B0, C0, D0, E0, F0, G0};
		 seg2 = {A1, B1, C1, D1, E1, F1, G1};
		 seg3 = {A2, B2, C2, D2, E2, F2, G2};

		 case (cc)
			0: begin
			  seg <= seg1;
			  COM <= 3'b110;
			  cc <= 1;
			end
			1: begin
			  seg <= seg2;
			  COM <= 3'b101;
			  cc <= 2;
			end
			2: begin
			  seg <= seg3;
			  COM <= 3'b011;
			  cc <= 0;
			end
		 endcase
	  end
	endmodule

	module BCD2Seg(input [3:0] D_count, output reg a, b, c, d, e, f, g);
	  always @(D_count)
		 case (D_count)
			4'b0000: {a,b,c,d,e,f,g} = 7'b0000001;
			4'b0001: {a,b,c,d,e,f,g} = 7'b1001111;
			4'b0010: {a,b,c,d,e,f,g} = 7'b0010010;
			4'b0011: {a,b,c,d,e,f,g} = 7'b0000110;
			4'b0100: {a,b,c,d,e,f,g} = 7'b1001100;
			4'b0101: {a,b,c,d,e,f,g} = 7'b0100100;
			4'b0110: {a,b,c,d,e,f,g} = 7'b0100000;
			4'b0111: {a,b,c,d,e,f,g} = 7'b0001111;
			4'b1000: {a,b,c,d,e,f,g} = 7'b0000000;
			4'b1001: {a,b,c,d,e,f,g} = 7'b0000100;
			default: {a,b,c,d,e,f,g} = 7'b1111111;
		 endcase
	endmodule
	module divfreq(input sysclk, output reg clk_div);
	  reg [24:0] Count;
	  always @(posedge sysclk) begin
		 if (Count > 25000000) begin
			Count <= 25'b0;
			clk_div <= ~clk_div;
		 end else
			Count <= Count + 1'b1;
	  end
	endmodule

	module divfreq2(input sysclk, output reg clk_div2);
	  reg [24:0] Count2;
	  always @(posedge sysclk) begin
		 if (Count2 > 10000) begin
			Count2 <= 25'b0;
			clk_div2 <= ~clk_div2;
		 end else
			Count2 <= Count2 + 1'b1;
	  end
	endmodule 
